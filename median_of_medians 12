def median_of_medians(arr, k):
    def partition(arr, low, high, pivot):
        # Move pivot to end
        for i in range(low, high + 1):
            if arr[i] == pivot:
                arr[i], arr[high] = arr[high], arr[i]
                break
        
        # Lomuto partition scheme
        i = low
        for j in range(low, high):
            if arr[j] <= pivot:
                arr[i], arr[j] = arr[j], arr[i]
                i += 1
        arr[i], arr[high] = arr[high], arr[i]
        return i

    def select(arr, low, high, k):
        if low == high:
            return arr[low]

        # Divide arr[low..high] into subarrays of length 5
        medians = []
        i = low
        while i <= high:
            sub_right = min(i + 4, high)
            subarray = sorted(arr[i:sub_right + 1])
            median = subarray[(sub_right - i) // 2]
            medians.append(median)
            i += 5

        # Find median of medians
        if len(medians) <= 5:
            pivot = sorted(medians)[len(medians) // 2]
        else:
            pivot = select(medians, 0, len(medians) - 1, len(medians) // 2)

        pivot_index = partition(arr, low, high, pivot)

        if k == pivot_index:
            return arr[pivot_index]
        elif k < pivot_index:
            return select(arr, low, pivot_index - 1, k)
        else:
            return select(arr, pivot_index + 1, high, k)

    return select(arr, 0, len(arr) - 1, k - 1)

# Example usage:
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 6
print("Input Array:", arr)
print("k:", k)
print("k-th smallest element:", median_of_medians(arr, k))
