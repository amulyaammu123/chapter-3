def merge_sort(arr):
    if len(arr) <= 1:
        return arr, 0
    
    # Split array into two halves
    mid = len(arr) // 2
    left_half, left_count = merge_sort(arr[:mid])
    right_half, right_count = merge_sort(arr[mid:])
    
    # Merge sorted halves and count comparisons
    sorted_arr, merge_count = merge(left_half, right_half)
    total_count = left_count + right_count + merge_count
    
    return sorted_arr, total_count

def merge(left, right):
    sorted_arr = []
    i = j = 0
    count = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            sorted_arr.append(left[i])
            i += 1
        else:
            sorted_arr.append(right[j])
            j += 1
        count += 1
    
    sorted_arr.extend(left[i:])
    sorted_arr.extend(right[j:])
    
    return sorted_arr, count

# Example usage:
arr = [12, 4, 78, 23, 45, 67, 89, 1]
sorted_arr, comparisons = merge_sort(arr)
print(f"Input Array: {arr}")
print(f"Sorted Array: {sorted_arr}")
print(f"Number of comparisons: {comparisons}")
