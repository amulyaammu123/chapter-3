def quick_sort(arr, low, high):
    if low < high:
        # Partition the array
        pivot_index = partition(arr, low, high)
        
        # Display the array after partitioning
        print(f"After partitioning: {arr}")
        
        # Recursively sort the sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

def partition(arr, low, high):
    # Choosing the first element as the pivot
    pivot = arr[low]
    left = low + 1
    right = high
    
    done = False
    while not done:
        while left <= right and arr[left] <= pivot:
            left += 1
        while arr[right] >= pivot and right >= left:
            right -= 1
        if right < left:
            done = True
        else:
            # Swap arr[left] and arr[right]
            arr[left], arr[right] = arr[right], arr[left]
    
    # Swap arr[low] (pivot) with arr[right]
    arr[low], arr[right] = arr[right], arr[low]
    
    # Return the pivot index
    return right

# Example usage:
arr = [10, 16, 8, 12, 15, 6, 3, 9, 5]
print("Input Array:", arr)
quick_sort(arr, 0, len(arr) - 1)
print("Sorted Array:", arr)
